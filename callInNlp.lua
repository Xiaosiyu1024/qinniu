---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Thinkive.
--- DateTime: 2020/8/9 11:48
---
function split(str, split_char)
    local sub_str_tab = {}
    while true do
        local pos = string.find(str, split_char)
        if not pos then
            table.insert(sub_str_tab, str)
            break
        end
        local sub_str = string.sub(str, 1, pos - 1)
        table.insert(sub_str_tab, sub_str)
        str = string.sub(str, pos + 1, string.len(str))
    end
    return sub_str_tab;
end

api = freeswitch.API();

local uuid = session:getVariable("uuid");
session:consoleLog("info", string.format("LUA INFO callInNlp[%s]  \n", uuid))

local sip_from_user = session:getVariable("sip_from_user")
local sip_to_user=session:getVariable("sip_to_user")

local sip_network_ip=session:getVariable("sip_network_ip")
local aclNetWorkIp=api:execute("fastcall_acl_deny",string.format("%s",sip_network_ip))
session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>>>>>>验证ip地址[%s] 响应结果[%s] \n", uuid, sip_network_ip, aclNetWorkIp));

if(aclNetWorkIp=="1" or aclNetWorkIp==1) then
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>> 异常挂机原因 >>> 呼入Ip 地址[%s] 是非法ip地址，请先加白名单 \n",uuid,  sip_network_ip));
    --session:hangup()
    --return
end

session:answer();
session:execute("sched_hangup","+7200")
local userInfo =api:execute("fastcall_get_username_by_caller",string.format("%s",sip_to_user))
session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>> 获取企业子账号信息 通过呼入被叫号码[%s]  响应结果[%s]  \n", uuid, sip_to_user,userInfo));
if(type(userInfo)=="nil" or userInfo=="0" or userInfo==0) then
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>> 异常挂机原因 >>> 未找到用户信息通过呼入主叫号码[%s]  \n",uuid,sip_to_user));
    --session:hangup()
    --return
end

local userName="aitesta"--api:execute("fastcall_jason_attr",string.format("%s##username",userInfo))
local parentSn="aitest"--api:execute("fastcall_jason_attr",string.format("%s##parent_sn",userInfo))

session:execute("fastcall_check_user_max_call",string.format("%s residue",userName))
local residue=session:getVariable("residue")
session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>  检查企业子账号[%s]的并发数 响应结果[%s] \n", uuid, userName,residue));

local isAbleValue = ""
local residueCount = ""
local residueTable = split(residue, ":");
for k, v in pairs(residueTable) do
    if (k == 1) then
        isAbleValue = v;
    end
    if (k == 2) then
        residueCount = v
    end
end

if(type(isAbleValue)=="nil" or isAbleValue=="0" or isAbleValue==0) then
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>  异常挂机原因 >>> 企业子账号[%s] 的并发数不够  \n",uuid,userName));
    session:hangup()
    return
end
session:execute("sleep","500")

session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>  sip_from_user     [%s]\n", uuid, session:getVariable("sip_from_user")));
if(session:getVariable("sip_from_user")=="18031912321" or session:getVariable("sip_from_user")=="15583716777") then
    skillGroupName="60296906_vip坐席组"
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 开始转人工 转到指定技能组[%s] \n",uuid,skillGroupName))
    --session:setVariable("fastcall_execute_on_answer", string.format("fastcall_realtime_detect_speech_start:detect:fastcall_asr:service_id=%s 0 both",asrServiceId));
    --session:setVariable("execute_on_post_bridge", "fastcall_realtime_detect_speech_stop");
    session:setVariable("hangup_after_bridge", "true");
    session:setVariable("continue_on_fail", "true");
    session:execute("fastcall_turnslic",string.format( "-1 %s 40 1 1 0 1 0 waiting.wav %s",skillGroupName,uuid));
    local fs_cancel_reason = session:getVariable("fs_cancel_reason")
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>  转入技能组 [%s] 响应结果 [%s] \n",uuid,skillGroupName, fs_cancel_reason))
    return ;
end

local changeTtsServer;
local trunkQues;
local intoToLy;
local intoIVRMode;
local playAsrBlpMsg;
local asrQuesReceiveSpeech;
local asrQuesToRequest;
local asrQuesTransferUsers;
local getJsonCMD;
local getJsonCMD0;
local getJsonCMD1;
local getJsonCMD2 = 6000;
local skillGroupName;
local IsAgentWorktime;
local customizationId;
local vocabularyId;
local getJsonAnswerMsg;
local MaxAsrAudioDuration;
local nlpButtonEvent;
local nlpButtonCountMax;
local nlpButtonScope;
local nlpButtonCompleteSinal
local punctuationPrediction=1;
local inverseTextNormalization=1;
local asrServiceId;
local asrServiceIdTemp;
local ttsServiceId;
local ttsServiceIdTemp;
local voiceTimeout;
local getDelayResponse = 0;
local isInterrupt = "1";
local recordingsDir ="/home/record";
local playTtsAndNoAsr=0;--控制播放tts时候是否启动识别，1：就是不启动识别
local detect_speech_result
local speechTimeOut
local fileName
local asrVoiceEnd
session:setVariable("has_record", "1");
session:setVariable("RECORD_USE_THREAD", "1");

--session:setVariable("tts_engine", "fastcall_tts:service_id=1");
--session:setVariable("language", "zh");
--session:setVariable("playback_delimiter", "!");
--session:setVariable("playback_sleep_val", "0");

--session:setVariable("cache_speech_handles", "1");
session:setVariable("cache_speech_handles", "0");
local proRemark=session:getVariable("pro_remark");
session:execute("fastcall_execsql", string.format("select remark,sn from projects where callee='${destination_number}' limit 1",sip_to_user))
session:execute("fastcall_get_field_value", session:getVariable("fs_execsql_handle") .. " 1:1:proRemark ");
local proRemark=session:getVariable("proRemark")
--local proRemark="first|isExameCall|Y|processID|1423973103552024578|passScore|60|taskID|1424676174447853569|processName|聚类流程|userID|1424552098504962049|tenantID|865335371|userName|gaoxin";

if(type(proRemark)=="nil"  or proRemark=="") then
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 异常挂机原因 >>> 调用nlp的参数query 属性值为空 \n",uuid))
    session:hangup();
    return ;
end

session:setVariable("nlp_pro_remark",string.gsub(proRemark, "_first_|", "")) --替换_first_|为空格
session:execute("export","nlp_pro_remark"..string.gsub(proRemark, "_first_|", ""))

local proRemarkEx = api:execute("url_encode", proRemark);
local sn = session:getVariable("sn");
if(type(sn)=="nil" or sn=="") then
    sn="callInNlp"..uuid
end
local mobile = session:getVariable("mobile");
local callNumber = session:getVariable("callNumber");
local isAutoDial ="0";
--local nlpUrl = "http://172.26.50.112:8087/CSRBroker/queryAction"; --内网ip地址
--local nlpUrl = "http://39.100.122.79:8087/CSRBroker/queryAction" --外网ip地址local nlpUrl = "http://192.168.1.237:8086/CSRBroker/queryAction"
-- local nlpUrl = "http://172.26.50.108:10086/CSRBroker/queryAction"
local nlpUrl = "http://172.26.50.112:10086/CSRBroker/queryAction"
local asrResult;
local requestModel=string.format('%s content-type application/json timeout 5  POST {"query":"%s","breakTts":"0","sessId":"%s","userId":"%s","mobile":"%s","callNumber":"%s","calltype":"%s"}',nlpUrl,proRemark , sn ,uuid ,mobile,callNumber,isAutoDial);
session:consoleLog("info",string.format( "LUA INFO  callInNlp[%s] >>>>>>>> 首次请求NLP 参数日志  %s \n",uuid,requestModel));
local semantics_result = api:execute("curl", requestModel);
if (type(semantics_result) == "nil" or semantics_result=="") then
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 异常挂机原因 >>> 首次请求NLP 响应结果为空 \n",uuid))
    session:hangup();
    return;
end
session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 首次请求NLP 响应结果 %s  \n",uuid,semantics_result));

local audioPrefix = api:execute("fastcall_jason_attr", string.format( "%s##audioPrefix",semantics_result));
if(type(audioPrefix)=="nil" or audioPrefix=="") then
    audioPrefix="callInNlp"
end

local getDate = api:execute("strftime", "%Y%m%d");
local getDateTime = api:execute("strftime", "%Y%m%d%H%M%S");
session:execute("record_session",recordingsDir.."/"..getDate.."/"..audioPrefix.."_"..sip_from_user.."_"..sip_to_user.."_"..getDateTime.."_all_"..uuid..".wav");

function executeFunction(functionName)
    if (session:ready() == false) then
        return ;
    end
    functionName();
end

changeTtsServer=function ()
    if(ttsServiceId~=ttsServiceIdTemp) then
        session:setVariable("tts_engine", string.format("fastcall_tts:service_id=%s",ttsServiceId));
        session:setVariable("language", "zh");
        session:setVariable("playback_delimiter", "!");
        session:setVariable("playback_sleep_val", "0");
    else
        ttsServiceIdTemp=ttsServiceId
    end 

    local voiceName = api:execute("fastcall_jason_attr", semantics_result .. "##singleNode.voice_name");--音色
    
    if(type(voiceName)~="nil" and voiceName~="") then
         session:setVariable("tts_voice",voiceName)
    else
         session:setVariable("tts_voice","*")
    end
    
end

trunkQues = function()
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 调用nlp 响应结果 %s \n",uuid,semantics_result));
    getJsonCMD = api:execute("fastcall_jason_attr", string.format("%s##singleNode.cmd",semantics_result));
    local cmdTable = split(getJsonCMD, "|");
    for k, v in pairs(cmdTable) do
        if (k == 1) then
            getJsonCMD0 = v;
        end
        if (k == 2) then
            getJsonCMD1 = v
        end
        if (k == 3) then
            getJsonCMD2 = v
        end
    end
    
    skillGroupName = api:execute("fastcall_jason_attr", string.format("%s##singleNode.agentID",semantics_result));--转人工技能组名称
    IsAgentWorktime= api:execute("fastcall_jason_attr", string.format("%s##IsAgentWorktime",semantics_result));
    if(type(IsAgentWorktime)=="nil" or IsAgentWorktime=="") then
         IsAgentWorktime=0
    end

    local Ext=api:execute("fastcall_jason_attr", string.format("%s##Ext",semantics_result));
    if(type(Ext)=="nil" or Ext=="") then
        Ext="null"
    end
    session:setVariable("nlp_business_ext",Ext);--透传nlp业务数据到
    session:execute("export","nlp_business_ext="..Ext);
    
    customizationId = api:execute("fastcall_jason_attr", string.format("%s##customization_id",semantics_result));
    vocabularyId = api:execute("fastcall_jason_attr", string.format("%s##vocabulary_id",semantics_result));
    getJsonAnswerMsg = api:execute("fastcall_jason_attr", string.format("%s##singleNode.answerMsg",semantics_result));
    MaxAsrAudioDuration = api:execute("fastcall_jason_attr", string.format("%s##MaxAsrAudioDuration",semantics_result));
    speechTimeOut=MaxAsrAudioDuration
    voiceTimeout = api:execute("fastcall_jason_attr", string.format("%s##voiceTimeout",semantics_result));
    getDelayResponse = api:execute("fastcall_jason_attr", string.format("%s##singleNode.delayResponse",semantics_result));

    nlpButtonEvent = api:execute("fastcall_jason_attr", string.format("%s##buttonEvent",semantics_result));
    nlpButtonCountMax = api:execute("fastcall_jason_attr", string.format("%s##buttonCountMax",semantics_result));
    nlpButtonScope = api:execute("fastcall_jason_attr", string.format("%s##buttonScope",semantics_result));
    nlpButtonCompleteSinal= api:execute("fastcall_jason_attr", semantics_result .. "##buttonCompleteSinal");
    
    asrServiceId = api:execute("fastcall_jason_attr", string.format("%s##asrServiceId",semantics_result));
    if(type(asrServiceId)=="nil" or asrServiceId=="") then
        asrServiceId="1"
    end
    --asrServiceId="2"
    ttsServiceId =api:execute("fastcall_jason_attr", semantics_result .. "##ttsServiceId");
     if(type(ttsServiceId)=="nil" or ttsServiceId=="") then
        ttsServiceId="1"
    end
    executeFunction(changeTtsServer)
    
    if(type(getJsonCMD0)~="nil" and  getJsonCMD0 == "ly") then
        executeFunction(intoToLy)
        return;
    end

    if (type(getJsonCMD0)~="nil" and  getJsonCMD0 == "end") then
        isInterrupt = "0";
    end
    
    if (type(nlpButtonEvent) ~= "nil" and nlpButtonEvent == "1") then
        executeFunction(intoIVRMode);
        return ;
    end
    
    executeFunction(playAsrBlpMsg);
end

--进入留言
intoToLy=function()

    local LeaveMsgMaxSeconds = api:execute("fastcall_jason_attr", string.format("%s##LeaveMsgMaxSeconds",semantics_result));
    if(type(LeaveMsgMaxSeconds)=="nil" or LeaveMsgMaxSeconds=="") then
        LeaveMsgMaxSeconds=60
    end
    local LeaveMsgEndButton = api:execute("fastcall_jason_attr", string.format("%s##LeaveMsgEndButton",semantics_result));
    if(type(LeaveMsgEndButton)=="nil" or LeaveMsgEndButton=="") then
        LeaveMsgEndButton="#"
    end
    session:execute("playback",getJsonAnswerMsg);
    session:setVariable("playback_terminators",LeaveMsgEndButton);--按键结束符号
    local getDate = api:execute("strftime", "%Y%m%d");
    local getDateTime = api:execute("strftime", "%Y%m%d%H%M%S");
    local  lyfile=recordingsDir.."/"..getDate.."/"..audioPrefix.."_"..sip_from_user.."_"..sip_to_user.."_"..getDateTime.."_ly_"..uuid..".wav" 
    session:execute("fastcall_record",lyfile.." "..LeaveMsgMaxSeconds);
    session:execute("fastcall_save_record","123");--保存留言
  
end

--进入ivr流程
intoIVRMode = function()
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> ivr流程：[%s] \n",uuid,getJsonAnswerMsg));
    if (type(getDelayResponse) ~= "nil") then
        session:execute("sleep", getDelayResponse);
    end
    
    if (type(getJsonCMD0) ~= "nil" and getJsonCMD0 == "end") then
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> ivr流程：end \n",uuid));
        session:execute("playback", getJsonAnswerMsg);
        session:hangup();
        return ;
    end

    --session:execute("playback", getJsonAnswerMsg);--20221115 旧 注：纯播放tts的脚本

    if (type(getJsonCMD0) ~= "nil" and getJsonCMD0 == "zrg") then
        executeFunction(asrQuesTransferUsers);
        return ;
    end
    
    local min=1;
    local max=nlpButtonCountMax;
    local triesCount=1;
    local digitsTimOut=8000;
    local firstTerminators="undef";
    local terminators=nlpButtonCompleteSinal;
    local invalidFile="nv.wav";
    local varName="keyValue";

    if(type(nlpButtonScope)=="nil" and nlpButtonScope=="") then
      nlpButtonScope=".*"
    end

    --local digitsPlayStr=string.format("%s detect:%s %s %s %s %s %s %s %s ^.*$","undef",min,max,triesCount,digitsTimOut,firstTerminators,terminators,invalidFile,varName) --20221115 旧 注：静音等待按键
    
    --注：20221115 新 播放tts并且允许用户按键能终止播放 增加控制当前话术允许输入的按键值
    local digitsPlayStr=string.format("%s detect:%s %s %s %s %s %s %s %s ^.*$",getJsonAnswerMsg,min,max,triesCount,digitsTimOut,firstTerminators,terminators,invalidFile,varName,nlpButtonScope) 
    
    session:consoleLog("info",string.format("LUA INFO callInNlp[%s]>>> , 静音收按键 播放串： [%s]",uuid,digitsPlayStr));
    session:flushDigits();
    session:execute("fastcall_play_and_get_digits", digitsPlayStr);
    local keyValue = session:getVariable("keyValue");
    asrResult = keyValue;
    fileName="0"
    if (type(asrResult) ~= "nil" and asrResult ~="") then
        session:consoleLog("info",string.format("LUA INFO callInNlp[%s]>>>  , 按键收入： [%s]",uuid,asrResult));
        executeFunction(asrQuesToRequest);
    else
        session:consoleLog("info",string.format("LUA INFO callInNlp[%s]>>> , 按键收入为空",uuid));
        asrResult = "_holdline_";
        executeFunction(asrQuesToRequest);
    end
end

--播放语音文件
playAsrBlpMsg = function()
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放语音文件：[%s] \n",uuid,getJsonAnswerMsg));
    if (type(getDelayResponse) ~= "nil" and getDelayResponse~="") then
        session:execute("sleep", getDelayResponse);
    end

    if (type(getJsonCMD0) ~= "nil" and getJsonCMD0 == "end") then
        session:execute("playback",getJsonAnswerMsg)
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> nlp响应挂机 \n",uuid));
        session:hangup();
        return ;
    end

    if (type(getJsonCMD0) ~= "nil" and getJsonCMD0 == "zrg") then
        session:execute("playback",getJsonAnswerMsg)
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> nlp响应转人工 \n",uuid));
        executeFunction(asrQuesTransferUsers);
        return ;
    end

    if(playTtsAndNoAsr==1) then
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放语音文件不启动识别：[%s] \n",uuid,getJsonAnswerMsg));
        session:execute("playback",getJsonAnswerMsg)
        executeFunction(asrQuesReceiveSpeech);
        return;
    end

    local recordFileDate = api:execute("strftime", "%Y%m%d");
    local recordFileDateTime = api:execute("strftime", "%Y%m%d%H%M%S");
    fileName=string.format("%s/%s/%s_playAndAsr_%s_%s_%s.wav",recordingsDir,recordFileDate,audioPrefix,recordFileDateTime,mobile,uuid);
    session:setVariable("filename", fileName);
    session:setVariable("ASR_NLP_RESPONSE", "");
    local playStr=string.format("%s detect:fastcall_asr:service_id=%s,customization_id=%s,vocabulary_id=%s,PunctuationPrediction=%s,inverse_text_normalization=%s {voice-break=0,need-voice-over=0,break-thresh=1500,start-thresh=480,end-thresh=350,break-span-ms=3000,speech-timeout=%s,voice-timeout=%s,no-input-timeout=%s}%s %s %s",
            getJsonAnswerMsg,
            asrServiceId,
            customizationId,vocabularyId,punctuationPrediction,inverseTextNormalization,
            speechTimeOut,voiceTimeout,"3000",
            fileName,nlpUrl,isInterrupt);

    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放TTS：播放串[%s] \n",uuid,playStr));
    if(asrServiceId~=asrServiceIdTemp) then
        session:execute("detect_speech","stop")
    end
    session:execute("fastcall_play_and_detect_speech",playStr); 
    asrServiceIdTemp=asrServiceId


    detect_speech_result = session:getVariable("detect_speech_result");
    if(type(detect_speech_result)~="nil") then
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放TTS 用户说话：[%s] \n",uuid,detect_speech_result));
    end

    detect_speech_result = api:execute("fastcall_strip_whitespace",detect_speech_result);

    asrResult=detect_speech_result

    semantics_result = session:getVariable("ASR_NLP_RESPONSE");
    if (type(semantics_result) ~= "nil") then
        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放语音文件 打断响应值：[%s] \n",uuid,semantics_result));
        executeFunction(trunkQues);
        return ;
    end

    asrVoiceEnd = session:getVariable("asr_voice_end");
    if(type(asrVoiceEnd)=="nil") then
        asrVoiceEnd="null"
    end
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> asrVoiceEnd：[%s] \n",uuid,asrVoiceEnd));

    if (type(detect_speech_result) == "nil" or detect_speech_result == "noinput" or detect_speech_result == "nomatch" or 
        detect_speech_result == "noresult"  or detect_speech_result == "voiceover" or detect_speech_result == "") then

        session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 播放语音文件 进入听取状态 \n",uuid));
        executeFunction(asrQuesReceiveSpeech);
        return ;
    end

    executeFunction(asrQuesToRequest)
end

--听取状态接收客户说话
asrQuesReceiveSpeech = function()
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>>>>>>>>>>进入静音收音状态 \n",uuid));
    
    if (type(getJsonCMD2) == "nil") then
        getJsonCMD2 = 6000;
    end

    if (type(getJsonCMD2) ~= "nil" and getJsonCMD2 == "0") then
        getJsonCMD2 = 6000;
    end

    local noInputTimeOut=getJsonCMD2;
    local recordFileDate = api:execute("strftime", "%Y%m%d");
    local recordFileDateTime = api:execute("strftime", "%Y%m%d%H%M%S");
    fileName=string.format("%s/%s/%s_receiveSpeech_%s_%s_%s.wav",recordingsDir,recordFileDate,audioPrefix,recordFileDateTime,mobile,uuid);
    session:setVariable("filename", fileName);
    session:setVariable("ASR_NLP_RESPONSE", "");

    local playStr=string.format("%s detect:fastcall_asr:service_id=%s,customization_id=%s,vocabulary_id=%s,PunctuationPrediction=%s,inverse_text_normalization=%s {voice-break=0,need-voice-over=0,break-thresh=1500,start-thresh=480,end-thresh=350,break-span-ms=3000,speech-timeout=%s,voice-timeout=%s,no-input-timeout=%s}%s %s %s",
            "undef",
            asrServiceId,
            customizationId,vocabularyId,punctuationPrediction,inverseTextNormalization
            ,speechTimeOut,voiceTimeout,noInputTimeOut,
            fileName,nlpUrl,"1");
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>>>>>>>>>>静音状态收音：播放串>>>>>>>>>[%s] \n",uuid,playStr));
    session:execute("fastcall_play_and_detect_speech",playStr);

    detect_speech_result=session:getVariable("detect_speech_result");

    if(type(detect_speech_result)=="nil") then
        session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 播放时被挂机   \n",uuid));
        session:hangup();
        return ;
    end

    detect_speech_result = api:execute("fastcall_strip_whitespace",detect_speech_result);
    
    semantics_result = session:getVariable("ASR_NLP_RESPONSE");
    
    if(type(semantics_result)=="nil") then
       semantics_result="null"
    end

    
    asrVoiceEnd = session:getVariable("asr_voice_end");
    if(type(asrVoiceEnd)=="nil") then
        asrVoiceEnd="null"
    end

    session:consoleLog("info", string.format("LUA INFO callInNlp[%s]>>> 静音状态收音 响应串>>>>>>>>>：semantics_result [%s],识别结果：[%s],是否播放完成：[%s] \n",uuid,semantics_result,detect_speech_result,asrVoiceEnd));
    asrResult = detect_speech_result;

    if (type(detect_speech_result) ~= "nil" and detect_speech_result == "noresult") then
        executeFunction(asrQuesReceiveSpeech);
        return ;
    end
    
    if (type(detect_speech_result) ~= "nil" and detect_speech_result == "noinput") then
        asrResult = "_holdline_";
    end

    if (type(detect_speech_result) ~= "nil" and detect_speech_result == "nomatch") then
        asrResult = "_no_match_";
    end
    
    executeFunction(asrQuesToRequest);
end

--根据结果去请求nlp
asrQuesToRequest = function()
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 请求nlp 参数 query [%s] \n",uuid,asrResult));
    local asrResultEx = api:execute("url_encode", asrResult);

    local fsAnsweredTime=session:getVariable("fs_answered_time");--应答时间
    if(type(fsAnsweredTime)=="nil" or fsAnsweredTime=="") then
       fsAnsweredTime=0
    end

    local playStartTime =session:getVariable("play_start_time");--播放开始时间
    if(type(playStartTime)=="nil" or playStartTime=="") then
       playStartTime=0
    end

    local playEndTime =session:getVariable("play_end_time");--播放结束时间
    if(type(playEndTime)=="nil" or playEndTime=="") then
       playEndTime=0
    end

    local asrStartTime =session:getVariable("asr_start_time");--切片开始时间
    if(type(asrStartTime)=="nil" or asrStartTime=="") then
       asrStartTime=0
    end 
    
    local asrEndTime=session:getVariable("asr_end_time");--切片结束时间
    if(type(asrEndTime)=="nil" or asrEndTime=="") then
       asrEndTime=0
    end

    session:consoleLog("info", string.format("UA INFO callInNlp[%s]>>>[%s]>>>>>>>>>>>>>>>应答时间[%s],开始时间[%s],结束时间[%s],\n",uuid,sn,fsAnsweredTime,asrStartTime,asrEndTime));
    local startCha=api:execute("fastcall_measure_seconds",fsAnsweredTime.."##"..asrStartTime);
    local endCha=api:execute("fastcall_measure_seconds",fsAnsweredTime.."##"..asrEndTime);
    
    local requestModel=string.format('%s content-type application/json timeout 5  POST {"query":"%s","reqTime":"%s","audioSliceID":"%s","breakTts":"%s","sessId":"%s","userId":"%s","soundRecordTimeSlot":[%s,%s],"answered_time":"%s","play_start_time":"%s","play_end_time":"%s","asr_start_time":"%s","asr_end_time":"%s"}',
        nlpUrl,asrResultEx ,api:execute("fastcall_get_tick"),fileName,"0",sn,uuid,startCha,endCha,fsAnsweredTime,playStartTime,playEndTime,asrStartTime,asrEndTime);
    session:consoleLog("info",string.format( "UA INFO callInNlp[%s]>>>[%s]>>>>>>>>>>>>>>>根据结果去请求 nlp  请求体：[%s] \n",uuid,sn,requestModel));
    semantics_result = api:execute("curl",requestModel);


    --session:consoleLog("info", string.format('%s content-type application/json timeout 5  POST {"query":"%s","audioSliceID":"%s","breakTts":"0","sessId":"%s","userId":"%s"}',nlpUrl,asrResultEx,fileName,sn,uuid))
    --semantics_result = api:execute("curl",string.format('%s content-type application/json timeout 5 POST {"query":"%s","audioSliceID":"%s","breakTts":"0","sessId":"%s","userId":"%s"}',nlpUrl,asrResultEx,fileName,sn,uuid));
    if (type(semantics_result) == "nil" or semantics_result=="") then
        session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 异常挂机原因 >>> 交互中请求 nlp 响应结果为空 \n",uuid))
        session:hangup();
        return ;
    end
    session:consoleLog("info", string.format("LUA INFO  callInNlp[%s] >>>>>>>> 交互中请求 nlp 响应结果 %s \n",uuid,semantics_result))
    executeFunction(trunkQues);
end

--转人工
asrQuesTransferUsers = function()
    session:consoleLog("info", string.format("LUA INFO  callIvrNlp[%s] >>>>>>>> 开始转人工 待转接技能组[%s] \n",uuid,skillGroupName))
    session:setVariable("is_tranf_agent", "1");
    session:setVariable("fastcall_execute_on_answer", string.format("fastcall_realtime_detect_speech_start:detect:fastcall_asr:service_id=%s 0 both",asrServiceId));
    session:setVariable("execute_on_post_bridge", "fastcall_realtime_detect_speech_stop");
    session:setVariable("hangup_after_bridge", "true");
    session:setVariable("continue_on_fail", "true");

    session:execute("fastcall_turnslic",string.format( "{off_work=%s}-1 %s 40 1 1 0 1 0 waiting.wav %s",IsAgentWorktime,skillGroupName,uuid));
    local fs_cancel_reason = session:getVariable("fs_cancel_reason")
    session:consoleLog("info", string.format("LUA INFO callInNlp[%s] >>>  转入技能组 [%s] 响应结果 [%s] \n",uuid,skillGroupName, fs_cancel_reason))
    return ;
end

trunkQues();
